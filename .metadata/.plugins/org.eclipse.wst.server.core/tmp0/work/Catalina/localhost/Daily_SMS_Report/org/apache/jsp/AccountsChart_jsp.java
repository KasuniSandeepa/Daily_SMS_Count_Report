/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.46
 * Generated at: 2021-09-07 05:18:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.TreeMap;
import java.awt.Label;
import java.util.Iterator;
import java.util.stream.Collector;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.Connection;
import java.util.HashMap;
import Operations.SMSdb;
import java.util.List;
import java.util.Map;
import modle.Account;
import java.util.ArrayList;
import com.google.gson.Gson;
import Database.*;

public final class AccountsChart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("Database");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.util.Iterator");
    _jspx_imports_classes.add("java.awt.Label");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("java.util.stream.Collectors");
    _jspx_imports_classes.add("Operations.SMSdb");
    _jspx_imports_classes.add("java.util.ArrayList");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.stream.Stream");
    _jspx_imports_classes.add("java.util.TreeMap");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.util.stream.Collector");
    _jspx_imports_classes.add("modle.Account");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=ISO-8859-1");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"ISO-8859-1\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"jquery-3.3.1.min.js\">\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("<script\r\n");
      out.write("	src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"\r\n");
      out.write("	type=\"text/javascript\"></script>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\r\n");
      out.write("<script src=\"https://canvasjs.com/assets/script/canvasjs.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	");

		Gson gsonObj = new Gson();
	ArrayList<Account> _AccountDetails = new ArrayList<>();

	boolean isSuccess;
	Connection connection;
	Statement statement;
	ResultSet resultSet;

	String[] months = {"January", "February", "March", "April", "May", "June", "July", "August", "Sepetember", "October",
			"November", "December"};
	try {

		// Call to the database connection
		connection = DBConnection.GetConnection();

		statement = connection.createStatement();

		String _Sql = "SELECT Account_Name , Month(Date) , sum(Msg_Count) FROM daily_sms_report.account group by MONTH(Date) , Account_Name  order by sum(Msg_Count) DESC limit 20;";

		resultSet = statement.executeQuery(_Sql);

		if (resultSet.next()) {

			do {

		String _AccountName = resultSet.getString(1);
		String _MonthNumber = resultSet.getString(2);
		int _MsgCount = resultSet.getInt(3);

		Account account = new Account(_AccountName, _MonthNumber, _MsgCount);

		_AccountDetails.add(account);

			} while (resultSet.next());
		}

	} catch (Exception e) {

		e.printStackTrace();
	}

	Map<String, List<Account>> mappedData = new HashMap<>();

	for (Account data : _AccountDetails) {

		if (mappedData.containsKey(data.getAccountName())) {

			mappedData.get(data.getAccountName()).add(data);
		} else {
			List<Account> tempList = new ArrayList<Account>();
			tempList.add(data);
			mappedData.put(data.getAccountName(), tempList);
		}

	}

	Map<String, List<Account>> sortedMap = new TreeMap<String, List<Account>>(mappedData);

	Map<Object, Object> map = null;
	//List<Map<Object, Object>> list = new ArrayList<Map<Object, Object>>();
	List<List<Map<Object, Object>>> mapList = new ArrayList<List<Map<Object, Object>>>();

	for (Map.Entry<String, List<Account>> entry : sortedMap.entrySet()) {
		//  System.out.println("Key = " + entry.getKey() +
		//               ", Value = " + entry.getValue());
		List<Map<Object, Object>> list = new ArrayList<Map<Object, Object>>();

		for (int j = 0; j < months.length; j++) {
			for (int i = 0; i < entry.getValue().size(); i++) {
		String month = months[Integer.parseInt(entry.getValue().get(i).getDate()) - 1];
		//  System.out.println(months[Integer.parseInt(entry.getValue().get(i).getDate())-1] +" " + entry.getValue().get(i).getMsgCount());

		int tempI = j + 1;
		int _month = Integer.parseInt(entry.getValue().get(i).getDate());

		System.out.println("Tempp " + tempI);
		System.out.println("Month " + _month);

		if (_month == tempI) {
			map = new HashMap<Object, Object>();
			map.put("label", month);
			map.put("y", entry.getValue().get(i).getMsgCount());

			list.add(map);

		} else {

			map = new HashMap<Object, Object>();
			map.put("label", months[j]);
			map.put("y", 0);
			list.add(map);
		}

			}
		}

		List<Map<Object, Object>> newList = new ArrayList<Map<Object, Object>>();

		for (Map e : list) {

			System.out.println("kkkkkkkkkkkk" + e);
			if (!newList.contains(e)) {

		newList.add(e);

			}
		}

		for (Map f : newList) {

			System.out.println("jjjjjjjjjjjjjjjjjj" + f);
		}

		Object label = new Object();
		Object count = new Object();
		Object obj = 0;
		//Object january = "January";
		Map<Object, Object> el = new HashMap<Object, Object>();

		List<Map<Object, Object>> removeList = new ArrayList<Map<Object, Object>>();
		for (Map e : newList) {

			//label = january;

			System.out.println(e.get("label"));

			System.out.println(e.values().toArray()[0]);
			if (label.equals(e.get("label"))) {

		if (count.equals(obj)) {
			System.out.println("I am here now");

			removeList.add(el);
		}
		//do nothing
		else if (e.get("y").equals("0")) {
			System.out.println("I am here now11111111111111111");

			//newList.remove(e);
			removeList.add(e);
		}
			} else {
		//do nothing
			}

			label = e.get("label");
			count = e.values().toArray()[0];
			System.out.println("counttt" + count);
			el = e;
			System.out.println("ELLL" + el);

		}
		newList.removeAll(removeList);
		System.out.println("lllllllllll" + newList);

		Map<Object, Object> m1 = new HashMap<Object, Object>();
		Map<Object, Object> m2 = new HashMap<Object, Object>();

		m1 = newList.get(0);
		m2 = newList.get(1);

		System.out.println("okkkk" + m1.get("label"));
		if (m1.get("label").equals(m2.get("label"))) {

			System.out.println("okkkk111" + m1.values().toArray()[0]);
			if (m1.values().toArray()[0].equals(obj)) {

		newList.remove(0);
			} else if (m2.values().toArray()[0].equals(obj)) {
		newList.remove(1);
			}
		}

		mapList.add(newList);

	}

	for (List v : mapList) {

		System.out.println("ggggggggggggggg" + v);
	}

	List<Map<Object, Object>> list1 = new ArrayList<Map<Object, Object>>();
	List<Map<Object, Object>> list2 = new ArrayList<Map<Object, Object>>();
	List<Map<Object, Object>> list3 = new ArrayList<Map<Object, Object>>();
	List<Map<Object, Object>> list4 = new ArrayList<Map<Object, Object>>();
	List<Map<Object, Object>> list5 = new ArrayList<Map<Object, Object>>();

	list1 = mapList.get(0);
	list2 = mapList.get(1);
	list3 = mapList.get(2);
	list4 = mapList.get(3);
	list5 = mapList.get(4);

	for (int i = 0; i < 5; i++) {
		System.out.println("bbbbbbbbbbbbbbbbb" + mapList.get(i));
	}

	String dataPoints = gsonObj.toJson(list1);
	String dataPoint1 = gsonObj.toJson(list2);
	String dataPoint2 = gsonObj.toJson(list3);
	String dataPoint3 = gsonObj.toJson(list4);
	String dataPoint4 = gsonObj.toJson(list5);
	// String dataPoint2 = gsonObj.toJson( mappedData.get("2018"));

	System.out.println("dddd" + mapList);
	
      out.write("\r\n");
      out.write("	<div id=\"chartContainer\" style=\"height: 370px; width: 100%;\"></div>\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("		window.onload = function() {\r\n");
      out.write("			var formatteddata = [];\r\n");
      out.write("			dataPoints =\r\n");
      out.write("	");
out.print(dataPoints);
      out.write("\r\n");
      out.write("		console.log(dataPoints);\r\n");
      out.write("			for ( var key in dataPoints) {\r\n");
      out.write("				var singleObject = {\r\n");
      out.write("					name : '',\r\n");
      out.write("					data : []\r\n");
      out.write("				}\r\n");
      out.write("				singleObject.name = key.toUpperCase();\r\n");
      out.write("				for (var i = 0; i < dataPoints[key].length; i++) {\r\n");
      out.write("					singleObject.data\r\n");
      out.write("							.push(parseInt(dataPoints[key][i].MsgCount));\r\n");
      out.write("				}\r\n");
      out.write("				console.log(singleObject);\r\n");
      out.write("				formatteddata.push(singleObject);\r\n");
      out.write("			}\r\n");
      out.write("\r\n");
      out.write("			drawMultipleLineChart(formatteddata);\r\n");
      out.write("\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		function drawMultipleLineChart(formatteddata) {\r\n");
      out.write("			var chart = new CanvasJS.Chart(\"chartContainer\", {\r\n");
      out.write("				title : {\r\n");
      out.write("					text : \"Multi-Series Line Chart\"\r\n");
      out.write("				},\r\n");
      out.write("				data : [ {\r\n");
      out.write("					type : \"line\",\r\n");
      out.write("					name : \"Sandeepa\",\r\n");
      out.write("					showInLegend : true,\r\n");
      out.write("					dataPoints :\r\n");
      out.write("	");
out.print(dataPoints);
      out.write("\r\n");
      out.write("		}, {\r\n");
      out.write("					type : \"line\",\r\n");
      out.write("					name : \"account1\",\r\n");
      out.write("					showInLegend : true,\r\n");
      out.write("					yValueFormatString : \"#,##0 messages\",\r\n");
      out.write("					dataPoints :\r\n");
      out.write("	");
out.print(dataPoint1);
      out.write("\r\n");
      out.write("		}, {\r\n");
      out.write("					type : \"line\",\r\n");
      out.write("					name : \"pickme_incentive\",\r\n");
      out.write("					showInLegend : true,\r\n");
      out.write("					yValueFormatString : \"#,##0 messages\",\r\n");
      out.write("					dataPoints :\r\n");
      out.write("	");
out.print(dataPoint2);
      out.write("\r\n");
      out.write("		},\r\n");
      out.write("\r\n");
      out.write("				{\r\n");
      out.write("					type : \"line\",\r\n");
      out.write("					name : \"pickme_promo\",\r\n");
      out.write("					showInLegend : true,\r\n");
      out.write("					yValueFormatString : \"#,##0 messages\",\r\n");
      out.write("					dataPoints :\r\n");
      out.write("	");
out.print(dataPoint3);
      out.write("\r\n");
      out.write("		},\r\n");
      out.write("\r\n");
      out.write("				{\r\n");
      out.write("					type : \"line\",\r\n");
      out.write("					name : \"2021\",\r\n");
      out.write("					showInLegend : true,\r\n");
      out.write("					yValueFormatString : \"#,##0 messages\",\r\n");
      out.write("					dataPoints :\r\n");
      out.write("	");
out.print(dataPoint4);
      out.write("\r\n");
      out.write("		}\r\n");
      out.write("\r\n");
      out.write("				]\r\n");
      out.write("			});\r\n");
      out.write("\r\n");
      out.write("			chart.render();\r\n");
      out.write("		}\r\n");
      out.write("	</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
